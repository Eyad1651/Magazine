{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMDAqAeKRZuD82IjP7U8/ls",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Eyad1651/Magazine/blob/master/SpeechProject\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install librosa\n",
        "!pip install opencv-python\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bEQOE78idQ2q",
        "outputId": "aa5ae19c-ed24-49ec-e401-0730a1f1b17b"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: librosa in /usr/local/lib/python3.10/dist-packages (0.10.2.post1)\n",
            "Requirement already satisfied: audioread>=2.1.9 in /usr/local/lib/python3.10/dist-packages (from librosa) (3.0.1)\n",
            "Requirement already satisfied: numpy!=1.22.0,!=1.22.1,!=1.22.2,>=1.20.3 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.13.1)\n",
            "Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.3.2)\n",
            "Requirement already satisfied: joblib>=0.14 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.4.2)\n",
            "Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (4.4.2)\n",
            "Requirement already satisfied: numba>=0.51.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.60.0)\n",
            "Requirement already satisfied: soundfile>=0.12.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.12.1)\n",
            "Requirement already satisfied: pooch>=1.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.8.2)\n",
            "Requirement already satisfied: soxr>=0.3.2 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.4.0)\n",
            "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (4.12.2)\n",
            "Requirement already satisfied: lazy-loader>=0.1 in /usr/local/lib/python3.10/dist-packages (from librosa) (0.4)\n",
            "Requirement already satisfied: msgpack>=1.0 in /usr/local/lib/python3.10/dist-packages (from librosa) (1.0.8)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from lazy-loader>=0.1->librosa) (24.1)\n",
            "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.51.0->librosa) (0.43.0)\n",
            "Requirement already satisfied: platformdirs>=2.5.0 in /usr/local/lib/python3.10/dist-packages (from pooch>=1.1->librosa) (4.2.2)\n",
            "Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.10/dist-packages (from pooch>=1.1->librosa) (2.32.3)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.0->librosa) (3.5.0)\n",
            "Requirement already satisfied: cffi>=1.0 in /usr/local/lib/python3.10/dist-packages (from soundfile>=0.12.1->librosa) (1.17.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0->soundfile>=0.12.1->librosa) (2.22)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (3.7)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->pooch>=1.1->librosa) (2024.7.4)\n",
            "Requirement already satisfied: opencv-python in /usr/local/lib/python3.10/dist-packages (4.10.0.84)\n",
            "Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.10/dist-packages (from opencv-python) (1.26.4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8fz4vPGhIMpS",
        "outputId": "ca41af96-cdab-4e0f-f15f-93e408f9d608"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  /content/archive.zip\n",
            "  inflating: /content/cats_dogs/cat_1.wav  \n",
            "  inflating: /content/cats_dogs/cat_10.wav  \n",
            "  inflating: /content/cats_dogs/cat_100.wav  \n",
            "  inflating: /content/cats_dogs/cat_101.wav  \n",
            "  inflating: /content/cats_dogs/cat_102.wav  \n",
            "  inflating: /content/cats_dogs/cat_103.wav  \n",
            "  inflating: /content/cats_dogs/cat_105.wav  \n",
            "  inflating: /content/cats_dogs/cat_106.wav  \n",
            "  inflating: /content/cats_dogs/cat_107.wav  \n",
            "  inflating: /content/cats_dogs/cat_108.wav  \n",
            "  inflating: /content/cats_dogs/cat_109.wav  \n",
            "  inflating: /content/cats_dogs/cat_11.wav  \n",
            "  inflating: /content/cats_dogs/cat_110.wav  \n",
            "  inflating: /content/cats_dogs/cat_112.wav  \n",
            "  inflating: /content/cats_dogs/cat_113.wav  \n",
            "  inflating: /content/cats_dogs/cat_114.wav  \n",
            "  inflating: /content/cats_dogs/cat_115.wav  \n",
            "  inflating: /content/cats_dogs/cat_116.wav  \n",
            "  inflating: /content/cats_dogs/cat_117.wav  \n",
            "  inflating: /content/cats_dogs/cat_118.wav  \n",
            "  inflating: /content/cats_dogs/cat_119.wav  \n",
            "  inflating: /content/cats_dogs/cat_12.wav  \n",
            "  inflating: /content/cats_dogs/cat_120.wav  \n",
            "  inflating: /content/cats_dogs/cat_121.wav  \n",
            "  inflating: /content/cats_dogs/cat_122.wav  \n",
            "  inflating: /content/cats_dogs/cat_123.wav  \n",
            "  inflating: /content/cats_dogs/cat_124.wav  \n",
            "  inflating: /content/cats_dogs/cat_125.wav  \n",
            "  inflating: /content/cats_dogs/cat_126.wav  \n",
            "  inflating: /content/cats_dogs/cat_127.wav  \n",
            "  inflating: /content/cats_dogs/cat_128.wav  \n",
            "  inflating: /content/cats_dogs/cat_129.wav  \n",
            "  inflating: /content/cats_dogs/cat_13.wav  \n",
            "  inflating: /content/cats_dogs/cat_130.wav  \n",
            "  inflating: /content/cats_dogs/cat_131.wav  \n",
            "  inflating: /content/cats_dogs/cat_132.wav  \n",
            "  inflating: /content/cats_dogs/cat_133.wav  \n",
            "  inflating: /content/cats_dogs/cat_134.wav  \n",
            "  inflating: /content/cats_dogs/cat_135.wav  \n",
            "  inflating: /content/cats_dogs/cat_136.wav  \n",
            "  inflating: /content/cats_dogs/cat_137.wav  \n",
            "  inflating: /content/cats_dogs/cat_138.wav  \n",
            "  inflating: /content/cats_dogs/cat_139.wav  \n",
            "  inflating: /content/cats_dogs/cat_14.wav  \n",
            "  inflating: /content/cats_dogs/cat_140.wav  \n",
            "  inflating: /content/cats_dogs/cat_141.wav  \n",
            "  inflating: /content/cats_dogs/cat_142.wav  \n",
            "  inflating: /content/cats_dogs/cat_143.wav  \n",
            "  inflating: /content/cats_dogs/cat_144.wav  \n",
            "  inflating: /content/cats_dogs/cat_146.wav  \n",
            "  inflating: /content/cats_dogs/cat_147.wav  \n",
            "  inflating: /content/cats_dogs/cat_148.wav  \n",
            "  inflating: /content/cats_dogs/cat_149.wav  \n",
            "  inflating: /content/cats_dogs/cat_15.wav  \n",
            "  inflating: /content/cats_dogs/cat_150.wav  \n",
            "  inflating: /content/cats_dogs/cat_151.wav  \n",
            "  inflating: /content/cats_dogs/cat_152.wav  \n",
            "  inflating: /content/cats_dogs/cat_153.wav  \n",
            "  inflating: /content/cats_dogs/cat_154.wav  \n",
            "  inflating: /content/cats_dogs/cat_155.wav  \n",
            "  inflating: /content/cats_dogs/cat_156.wav  \n",
            "  inflating: /content/cats_dogs/cat_157.wav  \n",
            "  inflating: /content/cats_dogs/cat_158.wav  \n",
            "  inflating: /content/cats_dogs/cat_159.wav  \n",
            "  inflating: /content/cats_dogs/cat_16.wav  \n",
            "  inflating: /content/cats_dogs/cat_160.wav  \n",
            "  inflating: /content/cats_dogs/cat_161.wav  \n",
            "  inflating: /content/cats_dogs/cat_162.wav  \n",
            "  inflating: /content/cats_dogs/cat_163.wav  \n",
            "  inflating: /content/cats_dogs/cat_164.wav  \n",
            "  inflating: /content/cats_dogs/cat_165.wav  \n",
            "  inflating: /content/cats_dogs/cat_166.wav  \n",
            "  inflating: /content/cats_dogs/cat_167.wav  \n",
            "  inflating: /content/cats_dogs/cat_17.wav  \n",
            "  inflating: /content/cats_dogs/cat_18.wav  \n",
            "  inflating: /content/cats_dogs/cat_19.wav  \n",
            "  inflating: /content/cats_dogs/cat_2.wav  \n",
            "  inflating: /content/cats_dogs/cat_20.wav  \n",
            "  inflating: /content/cats_dogs/cat_21.wav  \n",
            "  inflating: /content/cats_dogs/cat_22.wav  \n",
            "  inflating: /content/cats_dogs/cat_23.wav  \n",
            "  inflating: /content/cats_dogs/cat_24.wav  \n",
            "  inflating: /content/cats_dogs/cat_25.wav  \n",
            "  inflating: /content/cats_dogs/cat_26.wav  \n",
            "  inflating: /content/cats_dogs/cat_27.wav  \n",
            "  inflating: /content/cats_dogs/cat_28.wav  \n",
            "  inflating: /content/cats_dogs/cat_29.wav  \n",
            "  inflating: /content/cats_dogs/cat_3.wav  \n",
            "  inflating: /content/cats_dogs/cat_30.wav  \n",
            "  inflating: /content/cats_dogs/cat_31.wav  \n",
            "  inflating: /content/cats_dogs/cat_32.wav  \n",
            "  inflating: /content/cats_dogs/cat_33.wav  \n",
            "  inflating: /content/cats_dogs/cat_34.wav  \n",
            "  inflating: /content/cats_dogs/cat_35.wav  \n",
            "  inflating: /content/cats_dogs/cat_36.wav  \n",
            "  inflating: /content/cats_dogs/cat_37.wav  \n",
            "  inflating: /content/cats_dogs/cat_38.wav  \n",
            "  inflating: /content/cats_dogs/cat_39.wav  \n",
            "  inflating: /content/cats_dogs/cat_4.wav  \n",
            "  inflating: /content/cats_dogs/cat_40.wav  \n",
            "  inflating: /content/cats_dogs/cat_41.wav  \n",
            "  inflating: /content/cats_dogs/cat_42.wav  \n",
            "  inflating: /content/cats_dogs/cat_43.wav  \n",
            "  inflating: /content/cats_dogs/cat_44.wav  \n",
            "  inflating: /content/cats_dogs/cat_45.wav  \n",
            "  inflating: /content/cats_dogs/cat_46.wav  \n",
            "  inflating: /content/cats_dogs/cat_47.wav  \n",
            "  inflating: /content/cats_dogs/cat_48.wav  \n",
            "  inflating: /content/cats_dogs/cat_49.wav  \n",
            "  inflating: /content/cats_dogs/cat_5.wav  \n",
            "  inflating: /content/cats_dogs/cat_50.wav  \n",
            "  inflating: /content/cats_dogs/cat_51.wav  \n",
            "  inflating: /content/cats_dogs/cat_52.wav  \n",
            "  inflating: /content/cats_dogs/cat_53.wav  \n",
            "  inflating: /content/cats_dogs/cat_54.wav  \n",
            "  inflating: /content/cats_dogs/cat_55.wav  \n",
            "  inflating: /content/cats_dogs/cat_56.wav  \n",
            "  inflating: /content/cats_dogs/cat_57.wav  \n",
            "  inflating: /content/cats_dogs/cat_58.wav  \n",
            "  inflating: /content/cats_dogs/cat_59.wav  \n",
            "  inflating: /content/cats_dogs/cat_6.wav  \n",
            "  inflating: /content/cats_dogs/cat_60.wav  \n",
            "  inflating: /content/cats_dogs/cat_61.wav  \n",
            "  inflating: /content/cats_dogs/cat_62.wav  \n",
            "  inflating: /content/cats_dogs/cat_63.wav  \n",
            "  inflating: /content/cats_dogs/cat_64.wav  \n",
            "  inflating: /content/cats_dogs/cat_65.wav  \n",
            "  inflating: /content/cats_dogs/cat_66.wav  \n",
            "  inflating: /content/cats_dogs/cat_67.wav  \n",
            "  inflating: /content/cats_dogs/cat_68.wav  \n",
            "  inflating: /content/cats_dogs/cat_69.wav  \n",
            "  inflating: /content/cats_dogs/cat_7.wav  \n",
            "  inflating: /content/cats_dogs/cat_70.wav  \n",
            "  inflating: /content/cats_dogs/cat_71.wav  \n",
            "  inflating: /content/cats_dogs/cat_72.wav  \n",
            "  inflating: /content/cats_dogs/cat_73.wav  \n",
            "  inflating: /content/cats_dogs/cat_74.wav  \n",
            "  inflating: /content/cats_dogs/cat_75.wav  \n",
            "  inflating: /content/cats_dogs/cat_76.wav  \n",
            "  inflating: /content/cats_dogs/cat_77.wav  \n",
            "  inflating: /content/cats_dogs/cat_78.wav  \n",
            "  inflating: /content/cats_dogs/cat_79.wav  \n",
            "  inflating: /content/cats_dogs/cat_8.wav  \n",
            "  inflating: /content/cats_dogs/cat_80.wav  \n",
            "  inflating: /content/cats_dogs/cat_81.wav  \n",
            "  inflating: /content/cats_dogs/cat_82.wav  \n",
            "  inflating: /content/cats_dogs/cat_83.wav  \n",
            "  inflating: /content/cats_dogs/cat_84.wav  \n",
            "  inflating: /content/cats_dogs/cat_85.wav  \n",
            "  inflating: /content/cats_dogs/cat_86.wav  \n",
            "  inflating: /content/cats_dogs/cat_87.wav  \n",
            "  inflating: /content/cats_dogs/cat_88.wav  \n",
            "  inflating: /content/cats_dogs/cat_89.wav  \n",
            "  inflating: /content/cats_dogs/cat_9.wav  \n",
            "  inflating: /content/cats_dogs/cat_90.wav  \n",
            "  inflating: /content/cats_dogs/cat_91.wav  \n",
            "  inflating: /content/cats_dogs/cat_92.wav  \n",
            "  inflating: /content/cats_dogs/cat_93.wav  \n",
            "  inflating: /content/cats_dogs/cat_94.wav  \n",
            "  inflating: /content/cats_dogs/cat_95.wav  \n",
            "  inflating: /content/cats_dogs/cat_96.wav  \n",
            "  inflating: /content/cats_dogs/cat_97.wav  \n",
            "  inflating: /content/cats_dogs/cat_98.wav  \n",
            "  inflating: /content/cats_dogs/cat_99.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_0.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_1.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_10.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_100.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_101.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_102.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_103.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_104.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_105.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_106.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_107.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_108.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_109.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_11.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_110.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_111.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_112.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_12.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_13.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_14.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_15.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_16.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_17.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_18.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_19.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_2.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_20.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_21.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_22.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_23.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_24.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_25.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_26.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_27.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_28.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_29.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_3.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_30.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_31.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_32.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_33.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_34.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_35.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_36.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_37.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_38.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_39.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_4.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_40.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_41.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_42.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_43.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_44.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_45.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_46.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_47.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_48.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_49.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_5.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_50.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_51.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_52.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_53.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_54.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_55.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_56.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_57.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_58.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_59.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_6.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_60.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_61.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_62.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_63.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_64.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_65.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_66.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_67.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_68.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_69.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_7.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_70.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_71.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_72.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_73.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_74.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_75.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_76.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_77.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_78.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_79.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_8.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_80.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_81.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_82.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_83.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_84.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_85.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_86.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_87.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_88.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_89.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_9.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_90.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_91.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_92.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_93.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_94.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_95.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_96.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_97.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_98.wav  \n",
            "  inflating: /content/cats_dogs/dog_barking_99.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_110.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_112.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_115.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_126.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_129.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_130.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_133.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_135.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_137.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_14.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_143.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_144.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_148.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_152.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_158.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_17.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_20.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_24.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_28.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_29.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_3.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_36.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_42.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_55.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_56.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_57.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_58.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_59.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_61.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_66.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_67.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_75.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_76.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_79.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_82.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_85.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_86.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_88.wav  \n",
            "  inflating: /content/cats_dogs/test/cats/cat_90.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_112.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_12.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_15.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_19.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_24.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_3.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_34.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_43.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_44.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_45.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_46.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_48.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_49.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_54.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_59.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_62.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_64.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_66.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_7.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_73.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_78.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_8.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_82.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_89.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_9.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_90.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_91.wav  \n",
            "  inflating: /content/cats_dogs/test/test/dog_barking_99.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_1.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_10.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_100.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_101.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_102.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_103.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_105.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_106.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_107.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_108.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_109.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_11.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_113.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_114.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_116.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_117.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_118.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_119.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_12.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_120.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_121.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_122.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_123.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_124.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_125.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_127.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_128.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_13.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_131.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_132.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_134.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_136.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_138.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_139.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_140.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_141.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_142.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_146.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_147.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_149.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_15.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_150.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_151.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_153.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_154.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_155.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_156.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_157.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_159.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_16.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_160.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_161.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_162.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_163.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_164.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_165.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_166.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_167.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_18.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_19.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_2.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_21.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_22.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_23.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_25.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_26.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_27.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_30.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_31.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_32.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_33.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_34.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_35.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_37.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_38.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_39.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_4.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_40.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_41.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_43.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_44.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_45.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_46.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_47.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_48.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_49.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_5.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_50.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_51.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_52.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_53.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_54.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_6.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_60.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_62.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_63.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_64.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_65.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_68.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_69.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_7.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_70.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_71.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_72.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_73.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_74.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_77.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_78.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_8.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_80.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_81.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_83.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_84.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_87.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_89.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_9.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_91.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_92.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_93.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_94.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_95.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_96.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_97.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_98.wav  \n",
            "  inflating: /content/cats_dogs/train/cat/cat_99.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_0.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_1.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_10.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_100.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_101.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_102.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_103.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_104.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_105.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_106.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_107.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_108.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_109.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_11.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_110.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_111.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_13.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_14.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_16.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_17.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_18.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_2.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_20.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_21.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_22.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_23.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_25.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_26.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_27.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_28.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_29.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_30.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_31.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_32.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_33.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_35.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_36.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_37.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_38.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_39.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_4.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_40.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_41.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_42.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_47.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_5.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_50.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_51.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_52.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_53.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_55.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_56.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_57.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_58.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_6.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_60.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_61.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_63.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_65.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_67.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_68.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_69.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_70.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_71.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_72.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_74.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_75.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_76.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_77.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_79.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_80.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_81.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_83.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_84.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_85.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_86.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_87.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_88.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_92.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_93.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_94.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_95.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_96.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_97.wav  \n",
            "  inflating: /content/cats_dogs/train/dog/dog_barking_98.wav  \n",
            "  inflating: /content/train_test_split.csv  \n",
            "  inflating: /content/utils.py       \n"
          ]
        }
      ],
      "source": [
        "!unzip /content/archive.zip -d /content/\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip /content/sounds.zip -d /content/\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "87Ymm1hdgseM",
        "outputId": "e83bb01e-a080-4bed-db08-798a53bae441"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  /content/inferences.zip\n",
            "replace /content/inferences/cat-kitten1.wav? [y]es, [n]o, [A]ll, [N]one, [r]ename: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip /content/img_dataset.zip -d /content/\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jQABIWFthfrh",
        "outputId": "62ea0041-7b11-4cf4-83f8-00f515ee9037"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  /content/img_dataset.zip\n",
            "replace /content/img_dataset/inferences/cat-kitten1.jpg? [y]es, [n]o, [A]ll, [N]one, [r]ename: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import librosa\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.image import imread\n",
        "import matplotlib.image as mpimg\n",
        "from sklearn.metrics import classification_report\n",
        "from PIL import Image\n",
        "import cv2\n",
        "import torch\n",
        "from torch import nn\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "from torchvision.io import read_image\n",
        "from torch.utils.data import Dataset, DataLoader\n",
        "import torch.optim as optim\n",
        "import time\n"
      ],
      "metadata": {
        "id": "K6mqWbHgWUXk"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pd = pd.read_csv('/content/train_test_split.csv')\n",
        "pd"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "ddCSNGEcWeiG",
        "outputId": "4b700092-abf7-437b-ed89-ff1e0259746d"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Unnamed: 0     test_cat            test_dog    train_cat  \\\n",
              "0             0   cat_22.wav  dog_barking_97.wav   cat_99.wav   \n",
              "1             1  cat_116.wav   dog_barking_0.wav   cat_54.wav   \n",
              "2             2  cat_155.wav  dog_barking_93.wav   cat_34.wav   \n",
              "3             3   cat_58.wav  dog_barking_10.wav  cat_132.wav   \n",
              "4             4   cat_77.wav  dog_barking_26.wav  cat_124.wav   \n",
              "..          ...          ...                 ...          ...   \n",
              "110         110          NaN                 NaN   cat_15.wav   \n",
              "111         111          NaN                 NaN   cat_88.wav   \n",
              "112         112          NaN                 NaN   cat_73.wav   \n",
              "113         113          NaN                 NaN   cat_32.wav   \n",
              "114         114          NaN                 NaN  cat_113.wav   \n",
              "\n",
              "              train_dog  \n",
              "0    dog_barking_33.wav  \n",
              "1    dog_barking_86.wav  \n",
              "2    dog_barking_45.wav  \n",
              "3    dog_barking_76.wav  \n",
              "4     dog_barking_4.wav  \n",
              "..                  ...  \n",
              "110                 NaN  \n",
              "111                 NaN  \n",
              "112                 NaN  \n",
              "113                 NaN  \n",
              "114                 NaN  \n",
              "\n",
              "[115 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f99d39f6-5ff8-4ef5-8a1e-7b6a26f07810\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>test_cat</th>\n",
              "      <th>test_dog</th>\n",
              "      <th>train_cat</th>\n",
              "      <th>train_dog</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>cat_22.wav</td>\n",
              "      <td>dog_barking_97.wav</td>\n",
              "      <td>cat_99.wav</td>\n",
              "      <td>dog_barking_33.wav</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>cat_116.wav</td>\n",
              "      <td>dog_barking_0.wav</td>\n",
              "      <td>cat_54.wav</td>\n",
              "      <td>dog_barking_86.wav</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>cat_155.wav</td>\n",
              "      <td>dog_barking_93.wav</td>\n",
              "      <td>cat_34.wav</td>\n",
              "      <td>dog_barking_45.wav</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>cat_58.wav</td>\n",
              "      <td>dog_barking_10.wav</td>\n",
              "      <td>cat_132.wav</td>\n",
              "      <td>dog_barking_76.wav</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>cat_77.wav</td>\n",
              "      <td>dog_barking_26.wav</td>\n",
              "      <td>cat_124.wav</td>\n",
              "      <td>dog_barking_4.wav</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>110</th>\n",
              "      <td>110</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cat_15.wav</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>111</th>\n",
              "      <td>111</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cat_88.wav</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>112</th>\n",
              "      <td>112</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cat_73.wav</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>113</th>\n",
              "      <td>113</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cat_32.wav</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>114</th>\n",
              "      <td>114</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>cat_113.wav</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>115 rows × 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f99d39f6-5ff8-4ef5-8a1e-7b6a26f07810')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f99d39f6-5ff8-4ef5-8a1e-7b6a26f07810 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f99d39f6-5ff8-4ef5-8a1e-7b6a26f07810');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f5573e2c-b60e-4ce9-9838-152e30246999\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f5573e2c-b60e-4ce9-9838-152e30246999')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f5573e2c-b60e-4ce9-9838-152e30246999 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_82c2ec56-8ffe-4420-8c08-faf169baefad\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('pd')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_82c2ec56-8ffe-4420-8c08-faf169baefad button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('pd');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "pd",
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 115,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 33,\n        \"min\": 0,\n        \"max\": 114,\n        \"num_unique_values\": 115,\n        \"samples\": [\n          81,\n          4,\n          40\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_cat\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"cat_94.wav\",\n          \"cat_120.wav\",\n          \"cat_63.wav\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"test_dog\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"dog_barking_48.wav\",\n          \"dog_barking_69.wav\",\n          \"dog_barking_60.wav\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_cat\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 115,\n        \"samples\": [\n          \"cat_4.wav\",\n          \"cat_124.wav\",\n          \"cat_85.wav\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"train_dog\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 64,\n        \"samples\": [\n          \"dog_barking_31.wav\",\n          \"dog_barking_81.wav\",\n          \"dog_barking_33.wav\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!mkdir -p img_dataset/train/{cat,dog}\n",
        "!mkdir -p img_dataset/test/{cat,dog}"
      ],
      "metadata": {
        "id": "bgLcCCg0XGWy"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def create_spectogram(audio_file_name,source_path,save_path):\n",
        "    x, sr = librosa.load(source_path+audio_file_name)\n",
        "    X = librosa.stft(x)\n",
        "    Xdb = librosa.amplitude_to_db(abs(X))\n",
        "    plt.figure(figsize=(14, 5))\n",
        "    librosa.display.specshow(Xdb, sr=sr, y_axis='hz')\n",
        "    plt.ylabel('')\n",
        "    plt.axis('off')\n",
        "    file_name = audio_file_name.replace('.wav','')\n",
        "    plt.savefig(save_path+file_name+'.jpg', bbox_inches='tight', pad_inches=0)\n",
        "    plt.close() # Comment if you want to see the image"
      ],
      "metadata": {
        "id": "Sh2FRXXvXNAK"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert wav to image\n",
        "create_spectogram('cat_1.wav','./cats_dogs/train/cat/','./img_dataset/train/cat/')"
      ],
      "metadata": {
        "id": "xXqvPwZuXW7c"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Read a PIL image\n",
        "image = Image.open('./img_dataset/train/cat/cat_1.jpg')"
      ],
      "metadata": {
        "id": "o_OwLX5QZHBW"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create the spectogram images:\n",
        "transform = transforms.Compose([\n",
        "    transforms.PILToTensor(),\n",
        "    transforms.Resize(size = (256,256))\n",
        "])\n",
        "\n",
        "# transform = transforms.PILToTensor()\n",
        "# Convert the PIL image to Torch tensor\n",
        "img_tensor = transform(image)\n",
        "\n",
        "print(img_tensor)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WZz0BlGgZLYX",
        "outputId": "458ba370-149c-4281-b0b4-e93532eeaa06"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[[ 59,  59,  59,  ...,  59,  59,  59],\n",
            "         [ 59,  59,  59,  ...,  59,  59,  59],\n",
            "         [ 59,  59,  59,  ...,  59,  59,  59],\n",
            "         ...,\n",
            "         [194, 213, 216,  ..., 209, 226, 213],\n",
            "         [197, 197, 196,  ..., 203, 226, 226],\n",
            "         [180, 163, 152,  ..., 177, 183, 202]],\n",
            "\n",
            "        [[ 76,  76,  76,  ...,  76,  76,  76],\n",
            "         [ 76,  76,  76,  ...,  76,  76,  76],\n",
            "         [ 76,  76,  76,  ...,  76,  76,  76],\n",
            "         ...,\n",
            "         [208, 215, 218,  ..., 209, 199, 196],\n",
            "         [214, 207, 207,  ..., 210, 200, 202],\n",
            "         [202, 185, 176,  ..., 198, 188, 201]],\n",
            "\n",
            "        [[192, 192, 192,  ..., 192, 192, 192],\n",
            "         [192, 192, 192,  ..., 192, 192, 192],\n",
            "         [192, 192, 192,  ..., 192, 192, 192],\n",
            "         ...,\n",
            "         [238, 230, 233,  ..., 228, 192, 197],\n",
            "         [245, 233, 235,  ..., 232, 194, 195],\n",
            "         [242, 237, 231,  ..., 242, 221, 222]]], dtype=torch.uint8)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "CAT_TRAIN = './cats_dogs/train/cat/'\n",
        "for sound in os.listdir(CAT_TRAIN):\n",
        "    create_spectogram(sound,CAT_TRAIN,'./img_dataset/train/cat/')\n",
        "\n",
        "DOG_TRAIN = './cats_dogs/train/dog/'\n",
        "for sound in os.listdir(DOG_TRAIN):\n",
        "    create_spectogram(sound,DOG_TRAIN,'./img_dataset/train/dog/')\n",
        "\n",
        "DOG_TEST = './cats_dogs/test/test/'\n",
        "for sound in os.listdir(DOG_TEST):\n",
        "    create_spectogram(sound,DOG_TEST,'./img_dataset/test/dog/')\n",
        "\n",
        "\n",
        "CAT_TEST = './cats_dogs/test/cats/'\n",
        "for sound in os.listdir(CAT_TEST):\n",
        "    create_spectogram(sound,CAT_TEST,'./img_dataset/test/cat/')"
      ],
      "metadata": {
        "id": "9m4okvsRZO1N"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sounds = '/content/sounds'\n"
      ],
      "metadata": {
        "id": "1_ntNiwwZXdV"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "source": [
        "save_path = './content/img_dataset/sounds/'\n",
        "\n",
        "# Create the directory if it doesn't exist\n",
        "if not os.path.exists(save_path):\n",
        "    os.makedirs(save_path)\n",
        "\n",
        "for sound in os.listdir(sounds):\n",
        "    create_spectogram(sound,sounds + '/', save_path)"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "QYDCY0TxP5ow"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create Metadata for Tensor.Dataset\n",
        "\n",
        "image_names_ls = []\n",
        "file_location = []\n",
        "\n",
        "for i in ['test','train']:\n",
        "    file_location_subset = []\n",
        "    for j in ['cat','dog']:\n",
        "        image_names_ls.append([img for img in os.listdir(f'./img_dataset/{i}/{j}/')])\n",
        "        file_location.append([f'./img_dataset/{i}/{j}/{img}' for img in os.listdir(f'./img_dataset/{i}/{j}/')])"
      ],
      "metadata": {
        "id": "nBl2fx_iaGwx"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_set = pd.DataFrame({'image_name': image_names_ls[0] + image_names_ls[1], 'image_location': file_location[0] + file_location[1], 'target':len(file_location[0])*['cat']+len(file_location[1])*['dog']} )\n",
        "train_set = pd.DataFrame({'image_name': image_names_ls[2] + image_names_ls[3], 'image_location': file_location[2] + file_location[3], 'target':len(file_location[2])*['cat']+len(file_location[3])*['dog']})"
      ],
      "metadata": {
        "id": "RMCerBsmaJi-"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_set.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "E8OAl_eXaLYI",
        "outputId": "61ec77c0-306b-4214-ccde-ee46e02e38a5"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   image_name                     image_location target\n",
              "0  cat_28.jpg  ./img_dataset/test/cat/cat_28.jpg    cat\n",
              "1  cat_57.jpg  ./img_dataset/test/cat/cat_57.jpg    cat\n",
              "2  cat_88.jpg  ./img_dataset/test/cat/cat_88.jpg    cat\n",
              "3  cat_20.jpg  ./img_dataset/test/cat/cat_20.jpg    cat\n",
              "4  cat_59.jpg  ./img_dataset/test/cat/cat_59.jpg    cat"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8041bdeb-2775-4f3e-80c7-3064fdf18825\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>image_name</th>\n",
              "      <th>image_location</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>cat_28.jpg</td>\n",
              "      <td>./img_dataset/test/cat/cat_28.jpg</td>\n",
              "      <td>cat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>cat_57.jpg</td>\n",
              "      <td>./img_dataset/test/cat/cat_57.jpg</td>\n",
              "      <td>cat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>cat_88.jpg</td>\n",
              "      <td>./img_dataset/test/cat/cat_88.jpg</td>\n",
              "      <td>cat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>cat_20.jpg</td>\n",
              "      <td>./img_dataset/test/cat/cat_20.jpg</td>\n",
              "      <td>cat</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>cat_59.jpg</td>\n",
              "      <td>./img_dataset/test/cat/cat_59.jpg</td>\n",
              "      <td>cat</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8041bdeb-2775-4f3e-80c7-3064fdf18825')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8041bdeb-2775-4f3e-80c7-3064fdf18825 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8041bdeb-2775-4f3e-80c7-3064fdf18825');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4831f80f-1b22-49ec-bbbb-aaf65a7a647d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4831f80f-1b22-49ec-bbbb-aaf65a7a647d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4831f80f-1b22-49ec-bbbb-aaf65a7a647d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_set",
              "summary": "{\n  \"name\": \"test_set\",\n  \"rows\": 67,\n  \"fields\": [\n    {\n      \"column\": \"image_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 67,\n        \"samples\": [\n          \"cat_133.jpg\",\n          \"cat_55.jpg\",\n          \"cat_59.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"image_location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 67,\n        \"samples\": [\n          \"./img_dataset/test/cat/cat_133.jpg\",\n          \"./img_dataset/test/cat/cat_55.jpg\",\n          \"./img_dataset/test/cat/cat_59.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"dog\",\n          \"cat\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_set.to_csv('./img_dataset/test/test.csv')\n",
        "train_set.to_csv('./img_dataset/train/train.csv')"
      ],
      "metadata": {
        "id": "tbuct0SAaOs3"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_csv = pd.read_csv('./img_dataset/train/train.csv')\n",
        "test_csv = pd.read_csv('./img_dataset/test/test.csv')"
      ],
      "metadata": {
        "id": "HlrzwLpCQWDG"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_csv = train_csv.sample(frac =1, random_state = 42)\n",
        "test_csv = test_csv.sample(frac = 1, random_state = 42)\n",
        "train_csv.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tG8aAjB2QOpN",
        "outputId": "83009437-5602-4c04-ab2f-d3854766f86e"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(210, 4)"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_csv.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "q4nHrKmdQdr6",
        "outputId": "221c6bab-7e67-4615-96c7-65772d5420a9"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Unnamed: 0          image_name  \\\n",
              "149         149  dog_barking_74.jpg   \n",
              "128         128  dog_barking_76.jpg   \n",
              "161         161  dog_barking_98.jpg   \n",
              "143         143  dog_barking_21.jpg   \n",
              "133         133  dog_barking_11.jpg   \n",
              "\n",
              "                                 image_location target  \n",
              "149  ./img_dataset/train/dog/dog_barking_74.jpg    dog  \n",
              "128  ./img_dataset/train/dog/dog_barking_76.jpg    dog  \n",
              "161  ./img_dataset/train/dog/dog_barking_98.jpg    dog  \n",
              "143  ./img_dataset/train/dog/dog_barking_21.jpg    dog  \n",
              "133  ./img_dataset/train/dog/dog_barking_11.jpg    dog  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-962cfec8-19d4-4d5d-86ef-48e0a5934c54\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>image_name</th>\n",
              "      <th>image_location</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>149</td>\n",
              "      <td>dog_barking_74.jpg</td>\n",
              "      <td>./img_dataset/train/dog/dog_barking_74.jpg</td>\n",
              "      <td>dog</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>128</th>\n",
              "      <td>128</td>\n",
              "      <td>dog_barking_76.jpg</td>\n",
              "      <td>./img_dataset/train/dog/dog_barking_76.jpg</td>\n",
              "      <td>dog</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>161</th>\n",
              "      <td>161</td>\n",
              "      <td>dog_barking_98.jpg</td>\n",
              "      <td>./img_dataset/train/dog/dog_barking_98.jpg</td>\n",
              "      <td>dog</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>143</th>\n",
              "      <td>143</td>\n",
              "      <td>dog_barking_21.jpg</td>\n",
              "      <td>./img_dataset/train/dog/dog_barking_21.jpg</td>\n",
              "      <td>dog</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>133</th>\n",
              "      <td>133</td>\n",
              "      <td>dog_barking_11.jpg</td>\n",
              "      <td>./img_dataset/train/dog/dog_barking_11.jpg</td>\n",
              "      <td>dog</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-962cfec8-19d4-4d5d-86ef-48e0a5934c54')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-962cfec8-19d4-4d5d-86ef-48e0a5934c54 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-962cfec8-19d4-4d5d-86ef-48e0a5934c54');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ccbb03a7-17ec-4bcf-9c75-fefbb160cecb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ccbb03a7-17ec-4bcf-9c75-fefbb160cecb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ccbb03a7-17ec-4bcf-9c75-fefbb160cecb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train_csv",
              "summary": "{\n  \"name\": \"train_csv\",\n  \"rows\": 210,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60,\n        \"min\": 0,\n        \"max\": 209,\n        \"num_unique_values\": 210,\n        \"samples\": [\n          195,\n          44,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"image_name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 210,\n        \"samples\": [\n          \"dog_barking_102.jpg\",\n          \"cat_11.jpg\",\n          \"cat_33.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"image_location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 210,\n        \"samples\": [\n          \"./img_dataset/train/dog/dog_barking_102.jpg\",\n          \"./img_dataset/train/cat/cat_11.jpg\",\n          \"./img_dataset/train/cat/cat_33.jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"cat\",\n          \"dog\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_csv['image_location'].iloc[0]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "358E8Ti-QkIq",
        "outputId": "2db4918d-0670-49c9-a587-2a510d46b491"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'./img_dataset/train/dog/dog_barking_74.jpg'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def show_4_images(df):\n",
        "\n",
        "    images = df.sample(n = 4)\n",
        "\n",
        "    # create figure\n",
        "    fig = plt.figure(figsize=(10, 7))\n",
        "\n",
        "    # setting values to rows and column variables\n",
        "    rows = 2\n",
        "    columns = 2\n",
        "\n",
        "\n",
        "\n",
        "    # reading images\n",
        "    Image1 = cv2.imread(images['image_location'].iloc[0])\n",
        "    Image2 = cv2.imread(images['image_location'].iloc[1])\n",
        "    Image3 = cv2.imread(images['image_location'].iloc[2])\n",
        "    Image4 = cv2.imread(images['image_location'].iloc[3])\n",
        "\n",
        "    # Adds a subplot at the 1st position\n",
        "    fig.add_subplot(rows, columns, 1)\n",
        "\n",
        "    # showing image\n",
        "    plt.imshow(Image1)\n",
        "    plt.axis('off')\n",
        "    plt.title(images['image_name'].iloc[0])\n",
        "\n",
        "    # Adds a subplot at the 2nd position\n",
        "    fig.add_subplot(rows, columns, 2)\n",
        "\n",
        "    # showing image\n",
        "    plt.imshow(Image2)\n",
        "    plt.axis('off')\n",
        "    plt.title(images['image_name'].iloc[1])\n",
        "\n",
        "    # Adds a subplot at the 3rd position\n",
        "    fig.add_subplot(rows, columns, 3)\n",
        "\n",
        "    # showing image\n",
        "    plt.imshow(Image3)\n",
        "    plt.axis('off')\n",
        "    plt.title(images['image_name'].iloc[2])\n",
        "\n",
        "    # Adds a subplot at the 4th position\n",
        "    fig.add_subplot(rows, columns, 4)\n",
        "\n",
        "    # showing image\n",
        "    plt.imshow(Image4)\n",
        "    plt.axis('off')\n",
        "    plt.title(images['image_name'].iloc[3])"
      ],
      "metadata": {
        "id": "anyLoFjaQlVM"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class CatDogDataset(Dataset):\n",
        "    \"\"\"User defined class to build a datset using Pytorch class Dataset.\"\"\"\n",
        "\n",
        "    def __init__(self, data, transform = None):\n",
        "        \"\"\"Method to initilaize variables.\"\"\"\n",
        "        self.img_labels = data['target']\n",
        "        self.img_loc = data['image_location']\n",
        "\n",
        "        self.transform = transform\n",
        "\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "\n",
        "        img_path = os.path.join(self.img_loc.iloc[idx])\n",
        "        label = self.img_labels.iloc[idx]\n",
        "\n",
        "        if label == 'cat':\n",
        "            label = 0\n",
        "        else:\n",
        "            label = 1\n",
        "\n",
        "        image = Image.open(img_path)\n",
        "\n",
        "        if self.transform is not None:\n",
        "            image = self.transform(image)\n",
        "\n",
        "        return image, label\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.img_labels)"
      ],
      "metadata": {
        "id": "ZsrNLPVWQre5"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "transform = transforms.Compose([\n",
        "    transforms.PILToTensor(),\n",
        "    transforms.ConvertImageDtype(torch.float),\n",
        "    transforms.Resize(size = (256,256)),\n",
        "])"
      ],
      "metadata": {
        "id": "P02MRkR_QwFp"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "train_set = CatDogDataset(train_csv, transform)\n",
        "test_set = CatDogDataset(test_csv, transform)"
      ],
      "metadata": {
        "id": "vIE2Qq8TQyJk"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Returns an image, 3 channels, 256 x 256 pixels\n",
        "train_set[5][0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cBBEv7hvQ0sT",
        "outputId": "2217d1a7-8f8a-475e-8655-f78beec2646e"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[[0.2314, 0.2314, 0.2314,  ..., 0.2314, 0.2314, 0.2314],\n",
              "         [0.2314, 0.2314, 0.2314,  ..., 0.2314, 0.2314, 0.2314],\n",
              "         [0.2314, 0.2314, 0.2314,  ..., 0.2314, 0.2314, 0.2314],\n",
              "         ...,\n",
              "         [0.7070, 0.7070, 0.7070,  ..., 0.6616, 0.6615, 0.6615],\n",
              "         [0.8051, 0.8051, 0.8051,  ..., 0.6602, 0.6594, 0.6594],\n",
              "         [0.8558, 0.8558, 0.8558,  ..., 0.8172, 0.8160, 0.8160]],\n",
              "\n",
              "        [[0.2980, 0.2980, 0.2980,  ..., 0.2980, 0.2980, 0.2980],\n",
              "         [0.2980, 0.2980, 0.2980,  ..., 0.2980, 0.2980, 0.2980],\n",
              "         [0.2980, 0.2980, 0.2980,  ..., 0.2980, 0.2980, 0.2980],\n",
              "         ...,\n",
              "         [0.7738, 0.7738, 0.7738,  ..., 0.7690, 0.7708, 0.7707],\n",
              "         [0.8562, 0.8562, 0.8562,  ..., 0.7541, 0.7567, 0.7566],\n",
              "         [0.8564, 0.8564, 0.8564,  ..., 0.8417, 0.8416, 0.8416]],\n",
              "\n",
              "        [[0.7529, 0.7529, 0.7529,  ..., 0.7529, 0.7529, 0.7529],\n",
              "         [0.7529, 0.7529, 0.7529,  ..., 0.7529, 0.7529, 0.7529],\n",
              "         [0.7529, 0.7529, 0.7529,  ..., 0.7529, 0.7529, 0.7529],\n",
              "         ...,\n",
              "         [0.9153, 0.9153, 0.9153,  ..., 0.9912, 0.9911, 0.9911],\n",
              "         [0.9466, 0.9466, 0.9466,  ..., 0.9393, 0.9374, 0.9376],\n",
              "         [0.8824, 0.8824, 0.8824,  ..., 0.9122, 0.9099, 0.9099]]])"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 15\n",
        "\n",
        "# Each batch returns 15 tensors of 3x256x256 and label\n",
        "train_loader = DataLoader(train_set, batch_size=batch_size)\n",
        "test_loader = DataLoader(test_set, batch_size=batch_size)"
      ],
      "metadata": {
        "id": "2q6YTM9iQ3-r"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class CNN(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(CNN, self).__init__()\n",
        "        self.net=nn.Sequential(\n",
        "\n",
        "            # C1\n",
        "            nn.Conv2d(in_channels = 3, out_channels = 12, kernel_size = 3, stride = 1, padding = 1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size = 2),\n",
        "\n",
        "            # C2\n",
        "            nn.Conv2d(in_channels = 12, out_channels = 24, kernel_size = 3, stride = 1, padding = 1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size = 2),\n",
        "\n",
        "            #C3\n",
        "            nn.Conv2d(in_channels = 24, out_channels = 12, kernel_size = 3, stride = 1, padding = 1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size = 2),\n",
        "\n",
        "\n",
        "            # Dropout\n",
        "            nn.Dropout(.2),\n",
        "\n",
        "            nn.Flatten(), # 256/2/2/2 = 32\n",
        "\n",
        "            # FC1\n",
        "            nn.Linear(in_features = 32 * 32 * 12, out_features = 128),\n",
        "            nn.ReLU(),\n",
        "\n",
        "            # FC2\n",
        "            nn.Linear(in_features = 128, out_features = 64),\n",
        "            nn.ReLU(),\n",
        "\n",
        "            #output layer\n",
        "            nn.Linear(in_features = 64, out_features = 1),\n",
        "            nn.Sigmoid()\n",
        "\n",
        "            )\n",
        "\n",
        "\n",
        "    def forward(self, X):\n",
        "\n",
        "        X = self.net(X)\n",
        "\n",
        "        return X\n",
        "\n"
      ],
      "metadata": {
        "id": "jJVLzB80RFIL"
      },
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def eval_model(model,data_loader):\n",
        "    model.eval()\n",
        "    y_true_list=[]\n",
        "    y_pred_list=[]\n",
        "    test_loss = 0\n",
        "    for x,y in data_loader:\n",
        "        outputs=model(x)\n",
        "\n",
        "        # an output > .5 will round up to 1 which corresponds to dog.\n",
        "        y_pred = torch.round(outputs)\n",
        "        y_pred_list.extend(y_pred.clone().detach().tolist())\n",
        "        y_true_list.extend(y.clone().detach().tolist())\n",
        "\n",
        "        # Get the loss\n",
        "        loss = loss_fn(outputs, y.reshape(-1,1).to(torch.float32))\n",
        "\n",
        "        # Keep a running total\n",
        "        test_loss += loss.item()\n",
        "\n",
        "    acc=classification_report(y_true_list, y_pred_list,output_dict=True)['accuracy']\n",
        "    return acc, test_loss"
      ],
      "metadata": {
        "id": "crpSXyP1RIgr"
      },
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "device = \"cpu\"\n",
        "if (torch.cuda.is_available()):\n",
        "    # if GPU available, use cuda (on a cpu, training will take a considerable length of time!)\n",
        "    device = \"cuda\"\n",
        "\n",
        "# Create an instance of the model class and allocate it to the device\n",
        "model = CNN().to(device)\n",
        "\n",
        "print(device)\n",
        "print(model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ibggqf40RLaK",
        "outputId": "cd92fb54-f5e6-446e-d399-31a7442d38af"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cpu\n",
            "CNN(\n",
            "  (net): Sequential(\n",
            "    (0): Conv2d(3, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "    (1): ReLU()\n",
            "    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
            "    (3): Conv2d(12, 24, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "    (4): ReLU()\n",
            "    (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
            "    (6): Conv2d(24, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
            "    (7): ReLU()\n",
            "    (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
            "    (9): Dropout(p=0.2, inplace=False)\n",
            "    (10): Flatten(start_dim=1, end_dim=-1)\n",
            "    (11): Linear(in_features=12288, out_features=128, bias=True)\n",
            "    (12): ReLU()\n",
            "    (13): Linear(in_features=128, out_features=64, bias=True)\n",
            "    (14): ReLU()\n",
            "    (15): Linear(in_features=64, out_features=1, bias=True)\n",
            "    (16): Sigmoid()\n",
            "  )\n",
            ")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loss_fn = nn.BCELoss()  # binary cross entropy\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.0001)\n",
        "epochs = 50\n",
        "current_best = 0\n",
        "\n",
        "# Track metrics in these arrays\n",
        "epoch_nums = []\n",
        "training_loss = []\n",
        "validation_loss = []\n",
        "validation_acc = []"
      ],
      "metadata": {
        "id": "IAHIHcfkRkiW"
      },
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "start = time.time()\n",
        "\n",
        "for epoch in range(epochs):\n",
        "    train_loss = 0\n",
        "    model.train()\n",
        "    for x, y in train_loader:\n",
        "\n",
        "        # Reset the optimizer\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # Push the data forward through the model layers\n",
        "        output = model(x)\n",
        "\n",
        "        # Get the loss\n",
        "        loss = loss_fn(output, y.reshape(-1,1).to(torch.float32))\n",
        "\n",
        "        # Keep a running total\n",
        "        train_loss += loss.item()\n",
        "\n",
        "        # Backpropagate\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "    if epoch % 5 == 0:\n",
        "        metric, test_loss = eval_model(model,test_loader)\n",
        "        if metric > current_best:\n",
        "            best_model = model\n",
        "            current_best = metric\n",
        "            print(f'best accuracy so far is {current_best}')\n",
        "        epoch_nums.append(epoch)\n",
        "        training_loss.append(train_loss)\n",
        "        validation_loss.append(test_loss)\n",
        "        validation_acc.append(metric)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zrDLsvS4UQRw",
        "outputId": "77f4ad6d-6e3c-468b-d2c1-fd709791914f"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "best accuracy so far is 0.582089552238806\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "best accuracy so far is 0.8059701492537313\n",
            "best accuracy so far is 0.8208955223880597\n",
            "best accuracy so far is 0.835820895522388\n",
            "best accuracy so far is 0.8955223880597015\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "end = time.time()\n",
        "\n",
        "print(f\"{(end-start)/60} minutes to train\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qAimhytcUWEx",
        "outputId": "87f38e0c-e94d-4780-92fd-1cfd433b5fd3"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8.103400544325511 minutes to train\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Evaluate Model\n"
      ],
      "metadata": {
        "id": "Kbj9lUFJUh2J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(epoch_nums, training_loss)\n",
        "plt.plot(epoch_nums, validation_loss)\n",
        "plt.title('Loss Curve using Binary Cross Entropy')\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend(['Train Loss','Validation Loss'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "2ryrp-3iUYZ-",
        "outputId": "ebc5ca12-5ed7-42e2-a06c-799a389152d8"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(epoch_nums, validation_acc)\n",
        "plt.title('Validation Accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.ylabel('accuracy pct')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "piFxb5iNU87o",
        "outputId": "1de07819-2587-4402-b10f-0200d2ffc448"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Running sounds\n"
      ],
      "metadata": {
        "id": "AE3en7lNVLjJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for spectogram in os.listdir(\"./img_dataset/sounds\"):\n",
        "    try:\n",
        "        image = Image.open(f\"./img_dataset/sounds/{spectogram}\")\n",
        "\n",
        "        # unsqueeze converts transform.(image) from 3d (3,256,256) to 4d (1,3,256,256).\n",
        "        # you can think of '1' as a batch of 1 image since the model was trained with mini-batches.\n",
        "        ts = transform(image).unsqueeze(0)\n",
        "\n",
        "        pred = model(ts)\n",
        "        if pred[0,0] < .5:\n",
        "            label = 'cat'\n",
        "        else:\n",
        "            label = 'dog'\n",
        "        print(f\"for {spectogram}, the prediction is {label}.\")\n",
        "    except:\n",
        "        continue"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lPeYdC7ZVOVq",
        "outputId": "e09366b3-c28b-4716-d778-eb881d41a23c"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "for small_dog_bark_IgU_UsS.jpg, the prediction is dog.\n",
            "for cat-kitten3.jpg, the prediction is cat.\n",
            "for two_dogs_barking_9LS.jpg, the prediction is cat.\n",
            "for cat-kitten2.jpg, the prediction is cat.\n",
            "for cat-kitten1.jpg, the prediction is cat.\n"
          ]
        }
      ]
    }
  ]
}